"use strict";

const startDate = new Date();
startDate.setHours(0, 0, 0, 0);
const endDate = new Date("2026-01-05T00:00:00");
endDate.setHours(0, 0, 0, 0);
const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));

const pourButton = document.getElementById("pour-button");
const jamLevel = document.getElementById("jam-level");
const messageArea = document.getElementById("message-area");
const dayCounter = document.getElementById("day-counter");
const overlay = document.getElementById("overlay");

document.addEventListener("DOMContentLoaded", () => {
  pourButton.addEventListener("click", pourJam);
  checkState();
});

function updateJarVisual(filledDays) {
  const percent = (filledDays / totalDays) * 100;
  jamLevel.style.height = `${percent}%`;

  const remaining = totalDays - filledDays;

  const specialMessages = {
    10: "üéà –£—Ä–∞! –£–∂–µ 10 –¥–Ω–µ–π —Å–ª–∞–¥–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤!",
    50: "üíñ –ü–æ–ª—Ç–∏–Ω–Ω–∏–∫ —Ä–∞–¥–æ—Å—Ç–∏ ‚Äî —Ç—ã —Å–æ–∑–¥–∞—ë—à—å —á—É–¥–æ!",
    100: "üíØ –í–∞—Ä–µ–Ω—å–µ–≤–æ–π —Å–æ—Ç–Ω–∏–∫! –ö—Ç–æ –º–æ–ª–æ–¥–µ—Ü? üçì –¢—ã!",
    150: "üåü 150 –¥–Ω–µ–π ‚Äî –ø–æ—á—Ç–∏ –≤—Å—è –±–∞–Ω–∫–∞ –≤ –ª—é–±–≤–∏!",
    180: "üî• –ü–æ—á—Ç–∏ –º–∞–∫—Å–∏–º—É–º! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!",
    190: "üëë –¢—ã –ø–æ—á—Ç–∏ —É —Ñ–∏–Ω–∏—à–∞ ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª—è—é –∑–∞—Ä–∞–Ω–µ–µ!"
  };

  if (specialMessages[filledDays]) {
    dayCounter.textContent = specialMessages[filledDays];
  } else {
    const phrase = filledDays <= phrases188.length
      ? phrases188[filledDays - 1]
      : extraPhrases[Math.floor(Math.random() * extraPhrases.length)];
    dayCounter.textContent = `üîñ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –µ—â—ë ${remaining} ${declineDays(remaining)} ‚Äî ${phrase}`;
  }
}

function checkState() {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const filledDays = parseInt(localStorage.getItem("jamJarFilledDays") || "0");
  const lastPourDate = localStorage.getItem("jamJarLastPourDate");

  updateJarVisual(filledDays);

  if (today > endDate || filledDays >= totalDays) {
    finishJar(filledDays);
    return;
  }

  if (lastPourDate === today.toISOString().split("T")[0]) {
    pourButton.disabled = true;
    messageArea.textContent = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤–∞—Ä–µ–Ω—å–µ —É–∂–µ –≤–ª–∏—Ç–æ üçì";
  } else {
    pourButton.disabled = false;
    messageArea.textContent = "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ üôÇ";
  }
}

function pourJam() {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const todayStr = today.toISOString().split("T")[0];

  let filledDays = parseInt(localStorage.getItem("jamJarFilledDays") || "0");
  const lastPourDate = localStorage.getItem("jamJarLastPourDate");

  if (lastPourDate === todayStr) {
    messageArea.textContent = "–°–µ–≥–æ–¥–Ω—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ üíß";
    return;
  }

  filledDays++;
  localStorage.setItem("jamJarFilledDays", filledDays);
  localStorage.setItem("jamJarLastPourDate", todayStr);
  updateJarVisual(filledDays);

  messageArea.textContent = `üìÖ –î–µ–Ω—å ${filledDays} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–Ω–∫—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π!`;
  pourButton.disabled = true;

  if (filledDays >= totalDays) {
    finishJar(filledDays);
  }
}

function finishJar(filledDays) {
  updateJarVisual(filledDays);
  messageArea.textContent = "–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è! –ë–∞–Ω–∫–∞ –ø–æ–ª–Ω–∞! üéâ";
  pourButton.disabled = true;
  overlay.classList.remove("hidden");
}

function declineDays(n) {
  if (n % 10 === 1 && n % 100 !== 11) return "–¥–µ–Ω—å";
  if ([2, 3, 4].includes(n % 10) && ![12, 13, 14].includes(n % 100)) return "–¥–Ω—è";
  return "–¥–Ω–µ–π";
}
